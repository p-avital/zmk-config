/*
 * Copyright (c) 2023 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>

/*Uncomment this block if using RGB*/

&led_strip {
    // chain-length = <6>;
    // chain-length = <35>; // Uncomment if using both per-key and underglow LEDs

    chain-length = <29>; // Uncomment if using only per-key LEDs.
};

&lt {
    tapping-term-ms = <180>;
    flavor = "balanced";
};

&mt {
    tapping-term-ms = <180>;
    flavor = "balanced";
};

&sensors { triggers-per-rotation = < 64 >; };

/ {
    macros {
        deref: deref {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp MINUS &kp GT>;
            label = "DEREF";
        };

        double_arrow: double_arrow {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EQUAL &kp GT>;
            label = "DOUBLE_ARROW";
        };

        angle_surround: angle_surround {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LT &kp GT &kp LEFT>;
            label = "ANGLE_SURROUND";
        };

        mu: mu {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RA(RS(N8))>;
            label = "MU";
        };
    };

    combos {
        compatible = "zmk,combos";

        delete {
            bindings = <&kp DEL>;
            key-positions = <10 11>;
        };

        enter {
            bindings = <&kp ENTER>;
            key-positions = <34 35>;
        };

        caps_lock {
            bindings = <&kp CAPS>;
            key-positions = <36 24>;
        };

        backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <22 23>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ------------------------------------------------------------------------------------------------------------
            // |  ESC  |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |   `   |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |  I    |  O   |   P   |   -   |
            // |  CTRL |  A  |  S  |  D   |  F   |  G   |                   |  H   |  J    |  K    |  L   |   ;   |   '   |
            // | SHIFT |  Z  |  X  |  C   |  V   |  B   |   "["  |  |  "]"  |  N   |  M    |  ,    |  .   |   /   | SHIFT |
            //               |CTRL | ALT  | GUI  | LOWER|  SPACE |  | ENTER | RAISE| BSPC  | GUI   | RALT |

            bindings = <
&kp ESC    &kp N1   &kp N2       &kp N3          &kp N4       &kp N5                                 &kp N6           &kp N7       &kp N8      &kp N9       &kp N0                   &kp MINUS
&kp TAB    &kp Q    &kp W        &kp E           &kp R        &kp T                                  &kp Y            &kp U        &kp I       &kp O        &kp P                    &kp GRAVE
&kp RALT   &lt 2 A  &mt LCTRL S  &mt LEFT_ALT D  &mt LSHFT F  &kp G                                  &kp H            &mt RSHFT J  &mt RALT K  &mt RCTRL L  &mt LEFT_META SEMICOLON  &kp SQT
&kp LSHFT  &kp Z    &kp X        &kp C           &kp V        &kp B      &to 4          &to 3        &kp N            &kp M        &kp COMMA   &kp DOT      &kp FSLH                 &mt LEFT_SHIFT EQUAL
                    &kp LCTRL    &kp LALT        &kp LGUI     &lt 2 DEL  &lt 1 SPACE    &lt 1 SPACE  &lt 2 BACKSPACE  &kp BSPC     &kp ESCAPE  &kp RALT
            >;

            sensor-bindings =
                <&inc_dec_kp UP_ARROW DOWN_ARROW>,
                <&inc_dec_kp LEFT_ARROW RIGHT_ARROW>;
        };

        symbols {
            // ------------------------------------------------------------------------------------------------------------
            // | BTCLR | BT1 | BT2 |  BT3 |  BT4 |  BT5 |                   |      |       |       |      |       |       |
            // |  F1   |  F2 |  F3 |  F4  |  F5  |  F6  |                   |  F7  |  F8   |  F9   |  F10 |  F11  |  F12  |
            // |   `   |  !  |  @  |  #   |  $   |  %   |                   |  ^   |  &    |  *    |  (   |   )   |   ~   |
            // |       |     |     |      |      |      |        |  |       |      |  _    |  +    |  {   |   }   |  "|"  |
            //               |     |      |      |      |        |  |       |      |       |       |      |

            bindings = <
&bt BT_CLR  &bt BT_SEL 0      &bt BT_SEL 1  &bt BT_SEL 2      &bt BT_SEL 3       &bt BT_SEL 4                                     &trans     &trans                     &kp PRINTSCREEN  &trans                      &trans         &kp K_POWER
&kp F1      &kp N1            &kp N2        &kp N3            &kp N4             &kp N5                                           &kp N6     &kp N7                     &kp N8           &kp N9                      &kp N0         &kp MINUS
&kp GRAVE   &kp EXCL          &mt LCTRL AT  &mt LALT HASH     &kp DOLLAR         &kp PRCNT                                        &kp CARET  &mt RIGHT_SHIFT AMPERSAND  &mt RALT ASTRK   &mt RCTRL LEFT_PARENTHESIS  &kp RPAR       &kp TILDE
&trans      &ext_power EP_ON  &kp SLASH     &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp EQUAL     &kp K_MUTE       &kp C_PLAY_PAUSE  &mu        &deref                     &kp LS(LBRC)     &kp LS(RBRC)                &kp BACKSLASH  &kp PIPE
                              &trans        &trans            &trans             &kp MINUS     &kp LS(UNDER)    &kp LS(UNDER)     &kp MINUS  &trans                     &trans           &kp K_SLEEP
            >;

            sensor-bindings =
                <&inc_dec_kp C_VOL_DN C_VOL_UP>,
                <&inc_dec_kp C_PREVIOUS C_NEXT>;
        };

        arrows {
            // ------------------------------------------------------------------------------------------------------------
            // |       |     |     |      |      |      |                   |      |       |       |      |       |       |
            // |   `   |  1  |  2  |  3   |  4   |  5   |                   |  6   |   7   |   8   |  9   |   0   |       |
            // |   F1  |  F2 |  F3 |  F4  |  F5  |  F6  |                   |      |   <-  |   v   |  ^   |  ->   |       |
            // |   F7  |  F8 |  F9 |  F10 |  F11 |  F12 |        |  |       |  +   |   -   |   =   |  [   |   ]   |   \   |
            //               |     |      |      |      |        |  |       |      |       |       |      |

            bindings = <
&kp F1   &kp F2     &kp F3     &kp F4     &kp F5     &kp F6                                     &kp F7         &kp F8     &kp F9        &kp F10          &kp F11        &kp F12
&kp ESC  &kp HOME   &kp UP     &kp END    &kp BSPC   &kp DEL                                    &kp PAGE_UP    &kp HOME   &kp UP_ARROW  &kp END          &kp BACKSPACE  &kp DEL
&kp TAB  &trans     &trans     &trans     &trans     &kp F6                                     &kp TAB        &kp LEFT   &kp DOWN      &kp RIGHT_ARROW  &kp ENTER      &trans
&kp F7   &kp LC(Z)  &kp LC(X)  &kp LC(C)  &kp LC(V)  &kp F12    &trans           &trans         &kp PAGE_DOWN  &kp LC(X)  &kp LC(C)     &kp LC(V)        &kp F2         &kp BSLH
                    &trans     &trans     &trans     &kp MINUS  &kp LS(UNDER)    &kp LS(UNDER)  &kp MINUS      &trans     &trans        &trans
            >;

            sensor-bindings =
                <&inc_dec_kp LC(Z) LC(LS(Z))>,
                <&inc_dec_kp LC(Z) LC(LS(Z))>;
        };

        gaming {
            bindings = <
&kp ESC    &kp N1  &kp N2     &kp N3    &kp N4    &kp N5                             &kp N6    &kp N7    &kp N8     &kp N9    &kp N0    &kp MINUS
&kp TAB    &kp Q   &kp W      &kp E     &kp R     &kp T                              &kp Y     &kp U     &kp I      &kp O     &kp P     &kp LBKT
&kp BSPC   &kp A   &kp S      &kp D     &kp F     &kp G                              &kp H     &kp J     &kp K      &kp L     &kp SEMI  &kp SQT
&kp LSHFT  &kp Z   &kp X      &kp C     &kp V     &kp B      &kp FSLH     &to 0      &kp N     &kp M     &kp COMMA  &kp DOT   &kp FSLH  &kp EQUAL
                   &kp LCTRL  &kp LALT  &kp LALT  &kp SPACE  &kp LCTRL    &kp SPACE  &kp BSPC  &kp BSPC  &kp BSPC   &kp BSPC
            >;

            sensor-bindings =
                <&inc_dec_kp C_VOL_DN C_VOL_UP>,
                <&inc_dec_kp LEFT_ARROW RIGHT_ARROW>;
        };

        mac {
            // ------------------------------------------------------------------------------------------------------------
            // |  ESC  |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |   `   |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |  I    |  O   |   P   |   -   |
            // |  CTRL |  A  |  S  |  D   |  F   |  G   |                   |  H   |  J    |  K    |  L   |   ;   |   '   |
            // | SHIFT |  Z  |  X  |  C   |  V   |  B   |   "["  |  |  "]"  |  N   |  M    |  ,    |  .   |   /   | SHIFT |
            //               |CTRL | ALT  | GUI  | LOWER|  SPACE |  | ENTER | RAISE| BSPC  | GUI   | RALT |

            bindings = <
&kp ESC        &kp N1   &kp N2           &kp N3          &kp N4       &kp N5                              &kp N6  &kp N7       &kp N8      &kp N9           &kp N0               &kp MINUS
&kp TAB        &kp Q    &kp W            &kp E           &kp R        &kp T                               &kp Y   &kp U        &kp I       &kp O            &kp P                &kp GRAVE
&kp BACKSPACE  &lt 2 A  &mt LEFT_META S  &mt LEFT_ALT D  &mt LSHFT F  &kp G                               &kp H   &mt RSHFT J  &mt RALT K  &mt LEFT_META L  &mt LCTRL SEMICOLON  &kp SQT
&kp LSHFT      &kp Z    &kp X            &kp C           &kp V        &kp B   &to 0          &to 3        &kp N   &kp M        &kp COMMA   &kp DOT          &kp FSLH             &kp BSLH
                        &kp LCTRL        &kp LALT        &kp LGUI     &mo 2   &lt 1 SPACE    &lt 1 SPACE  &mo 2   &kp BSPC     &kp RGUI    &kp RALT
            >;

            sensor-bindings =
                <&inc_dec_kp DOWN_ARROW UP_ARROW>,
                <&inc_dec_kp RIGHT LEFT_ARROW>;
        };

        mac_arrows {
            // ------------------------------------------------------------------------------------------------------------
            // |       |     |     |      |      |      |                   |      |       |       |      |       |       |
            // |   `   |  1  |  2  |  3   |  4   |  5   |                   |  6   |   7   |   8   |  9   |   0   |       |
            // |   F1  |  F2 |  F3 |  F4  |  F5  |  F6  |                   |      |   <-  |   v   |  ^   |  ->   |       |
            // |   F7  |  F8 |  F9 |  F10 |  F11 |  F12 |        |  |       |  +   |   -   |   =   |  [   |   ]   |   \   |
            //               |     |      |      |      |        |  |       |      |       |       |      |

            bindings = <
&kp F1   &kp F2     &kp F3     &kp F4     &kp F5     &kp F6                           &kp F7         &kp F8     &kp F9        &kp F10          &kp F11        &kp F12
&kp ESC  &kp HOME   &kp UP     &kp END    &kp BSPC   &kp DEL                          &kp PAGE_UP    &kp HOME   &kp UP_ARROW  &kp END          &kp BACKSPACE  &kp DEL
&kp TAB  &trans     &trans     &trans     &trans     &kp F6                           &kp TAB        &kp LEFT   &kp DOWN      &kp RIGHT_ARROW  &kp ENTER      &trans
&kp F7   &kp LG(Z)  &kp LG(X)  &kp LG(C)  &kp LG(V)  &kp F12  &trans       &trans     &kp PAGE_DOWN  &kp LG(X)  &kp LG(C)     &kp LG(V)        &kp F2         &kp BSLH
                    &trans     &trans     &trans     &trans   &kp UNDER    &kp UNDER  &trans         &trans     &trans        &trans
            >;

            sensor-bindings =
                <&inc_dec_kp C_VOL_UP C_VOL_DN>,
                <&inc_dec_kp LS(LG(Z)) LG(Z)>;
        };
    };
};
